package oogasalad.player.model.strategies.collision;

import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import oogasalad.engine.records.CollisionContextRecord;
import oogasalad.player.model.Entity;
import oogasalad.player.model.GameMapInterface;
import oogasalad.player.model.GameState;

class ResetTimeElapsedStrategyTest {

  // Test generated by Claude 3.5 Sonnet and IntelliJ code assist.
  private ResetTimeElapsedStrategy strategy;
  private Entity mockEntity1;
  private Entity mockEntity2;
  private GameMapInterface mockGameMap;
  private GameState mockGameState;

  @BeforeEach
  void setUp() {
    strategy = new ResetTimeElapsedStrategy();
    mockEntity1 = mock(Entity.class);
    mockEntity2 = mock(Entity.class);
    mockGameMap = mock(GameMapInterface.class);
    mockGameState = mock(GameState.class);
  }

  @Test
  void handleCollision_ResetsTimeElapsed_Success() {
    // Create collision context with any StrategyAppliesTo value since it doesn't matter for this strategy
    CollisionContextRecord context = new CollisionContextRecord(
        mockEntity1,
        mockEntity2,
        mockGameMap,
        mockGameState,
        CollisionContextRecord.StrategyAppliesTo.ENTITY1
    );

    strategy.handleCollision(context);

    // Verify that resetTimeElapsed was called on the game state
    verify(mockGameState).resetTimeElapsed();
  }

  @Test
  void handleCollision_OnlyResetsTimeOncePerCall_Success() {
    CollisionContextRecord context = new CollisionContextRecord(
        mockEntity1,
        mockEntity2,
        mockGameMap,
        mockGameState,
        CollisionContextRecord.StrategyAppliesTo.ENTITY2
    );

    // Call handleCollision multiple times
    strategy.handleCollision(context);
    strategy.handleCollision(context);
    strategy.handleCollision(context);

    // Verify that resetTimeElapsed was called exactly once for each handleCollision call
    verify(mockGameState, times(3)).resetTimeElapsed();
  }
}
